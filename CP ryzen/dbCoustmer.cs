//
// dbCustomer DATABASE TABLE FOR CUSTOMERS
// =======================================
// This is a class that manages the customer
// table for the database. It is adapted from
// the basic database class and has a customised
// Data class that provides access to the fields
// in the customer table.
//
// Revision History
// ================
// 02.11.2024 BRD Original version.
// [Current Date] Security improvements added - password hashing, validation
//
using System.IO;
using System.Text.Json;
using System;
using BCrypt.Net; // Add this for password hashing

namespace ShippingManagementSystem
{
    internal class dbCustomer
    {
        private string lastError = "";
        public Data data = new Data();
        private string tableName = "";
        private string directoryName = "";

        //
        // Constructor
        // ===========
        public dbCustomer()
        {
            // Automatically set a string to hold the path to the Database folder in the
            // correct bin/Debug folder for this project.
            directoryName = Directory.GetCurrentDirectory();

            // Set the name of the database table in the Database folder. It will
            // be a subdirectory of the Database folder located below the bin/Debug
            // folder for this project.
            tableName = "customer";
        }

        //
        // LastError 
        // =========
        // Returns the last error message generated by this class.
        //
        public string LastError
        {
            get { return lastError; }
        }

        //
        // Read
        // ====
        // Reads the specified record from the database table and unpacks the data in the
        // record if it is found. If the record is not found, all the database entries are
        // automatically set blank so a new record can be created by the program if necessary.
        // 
        public Boolean Read(string ID)
        {
            lastError = "";
            Boolean found = false;
            string json;

            // Input validation
            if (string.IsNullOrWhiteSpace(ID))
            {
                lastError = "The record ID cannot be blank or empty";
                return false;
            }

            if (directoryName.Trim() == "")
            {
                lastError = "Database directory name is blank.";
                return false;
            }

            if (tableName.Trim() == "")
            {
                lastError = "Table name is blank.";
                return false;
            }

            try
            {
                string filePath = Path.Combine(directoryName, "Database", tableName, ID + ".txt");

                if (!File.Exists(filePath))
                {
                    lastError = "User record not found.";
                    return false;
                }

                using (StreamReader reader = new StreamReader(filePath))
                {
                    json = reader.ReadToEnd();
                }

                // The options variable sets up the parameters to make the Deserializer 
                // case insensitive.
                var JsonOptions = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

                data = JsonSerializer.Deserialize<Data>(json, JsonOptions);
                found = true;
            }
            catch (Exception e)
            {
                lastError = $"Error reading user data: {e.Message}";
                found = false;
            }

            return found;
        }

        //
        // NEW: SetPassword - Securely hash password before storing
        // =====================================================
        public void SetPassword(string plainTextPassword)
        {
            if (string.IsNullOrEmpty(plainTextPassword))
            {
                throw new ArgumentException("Password cannot be empty");
            }

            if (plainTextPassword.Length < 6)
            {
                throw new ArgumentException("Password must be at least 6 characters long");
            }

            // Hash the password using BCrypt with default work factor (10)
            data.PASSWORD = BCrypt.Net.BCrypt.HashPassword(plainTextPassword);
        }

        //
        // NEW: VerifyPassword - Check if provided password matches stored hash
        // ==================================================================
        public bool VerifyPassword(string plainTextPassword)
        {
            if (string.IsNullOrEmpty(plainTextPassword) || string.IsNullOrEmpty(data.PASSWORD))
            {
                return false;
            }

            try
            {
                return BCrypt.Net.BCrypt.Verify(plainTextPassword, data.PASSWORD);
            }
            catch (Exception)
            {
                // If password is not hashed (legacy passwords), fall back to plain text comparison
                // This allows migration from old plain text passwords
                return data.PASSWORD == plainTextPassword;
            }
        }

        //
        // Update - Enhanced with better error handling and security
        // ========================================================
        public Boolean Update(string ID)
        {
            Boolean updated = false;
            string json = "";
            lastError = "";

            // Input validation
            if (string.IsNullOrWhiteSpace(ID))
            {
                lastError = "User ID cannot be empty";
                return false;
            }

            if (directoryName.Trim() == "")
            {
                lastError = "Database directory name is blank.";
                return false;
            }

            if (tableName.Trim() == "")
            {
                lastError = "Table name is blank.";
                return false;
            }

            // Validate required fields
            if (string.IsNullOrWhiteSpace(data.USERNAME))
            {
                lastError = "Username cannot be empty";
                return false;
            }

            if (string.IsNullOrWhiteSpace(data.PASSWORD))
            {
                lastError = "Password cannot be empty";
                return false;
            }

            try
            {
                // Ensure directory exists
                string fullPath = Path.Combine(directoryName, "Database", tableName);
                Directory.CreateDirectory(fullPath);

                // The options variable sets up the parameters to make the Serializer 
                // format the JSON values indented on individual lines.
                var options = new JsonSerializerOptions()
                {
                    WriteIndented = true
                };

                // Create the JSON format record for the table
                json = JsonSerializer.Serialize(data, options);

                // Write the record to the table
                string filePath = Path.Combine(fullPath, ID + ".txt");
                using (StreamWriter writer = new StreamWriter(filePath))
                {
                    writer.Write(json);
                }
                updated = true;
            }
            catch (Exception e)
            {
                lastError = $"Could not save user data: {e.Message}";
            }

            return updated;
        }

        //
        // NEW: Input Validation Methods
        // =============================

        public static bool IsValidEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
                return false;

            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }

        public static bool IsValidUsername(string username)
        {
            if (string.IsNullOrWhiteSpace(username))
                return false;

            if (username.Length < 3 || username.Length > 20)
                return false;

            // Only allow letters, numbers, and underscores
            foreach (char c in username)
            {
                if (!char.IsLetterOrDigit(c) && c != '_')
                    return false;
            }

            return true;
        }

        public static bool IsValidPassword(string password)
        {
            if (string.IsNullOrEmpty(password))
                return false;

            return password.Length >= 6; // Minimum 6 characters
        }
    }

    //
    // Data - Enhanced with input sanitization
    // =======================================
    internal class Data
    {
        private string Username;
        private string Password;
        private string Company;
        private string Email;
        private string Phone;

        public string USERNAME
        {
            get { return Username; }
            set { Username = value?.Trim(); } // Trim whitespace
        }

        public string PASSWORD
        {
            get { return Password; }
            set { Password = value; } // Don't trim passwords - they might have intentional spaces
        }

        public string COMPANY
        {
            get { return Company; }
            set { Company = value?.Trim(); }
        }

        public string EMAIL
        {
            get { return Email; }
            set { Email = value?.Trim()?.ToLowerInvariant(); } // Normalize email to lowercase
        }

        public string PHONE
        {
            get { return Phone; }
            set { Phone = value?.Trim(); }
        }
    }
}